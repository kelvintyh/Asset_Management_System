'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="AMSDB")>  _
Partial Public Class AMSDBDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertAsset(instance As Asset)
    End Sub
  Partial Private Sub UpdateAsset(instance As Asset)
    End Sub
  Partial Private Sub DeleteAsset(instance As Asset)
    End Sub
  Partial Private Sub InsertAssetType(instance As AssetType)
    End Sub
  Partial Private Sub UpdateAssetType(instance As AssetType)
    End Sub
  Partial Private Sub DeleteAssetType(instance As AssetType)
    End Sub
  Partial Private Sub InsertInventoryLocation(instance As InventoryLocation)
    End Sub
  Partial Private Sub UpdateInventoryLocation(instance As InventoryLocation)
    End Sub
  Partial Private Sub DeleteInventoryLocation(instance As InventoryLocation)
    End Sub
  Partial Private Sub InsertManufacturer(instance As Manufacturer)
    End Sub
  Partial Private Sub UpdateManufacturer(instance As Manufacturer)
    End Sub
  Partial Private Sub DeleteManufacturer(instance As Manufacturer)
    End Sub
  Partial Private Sub InsertWarranty(instance As Warranty)
    End Sub
  Partial Private Sub UpdateWarranty(instance As Warranty)
    End Sub
  Partial Private Sub DeleteWarranty(instance As Warranty)
    End Sub
  Partial Private Sub InsertLoginHistory(instance As LoginHistory)
    End Sub
  Partial Private Sub UpdateLoginHistory(instance As LoginHistory)
    End Sub
  Partial Private Sub DeleteLoginHistory(instance As LoginHistory)
    End Sub
  Partial Private Sub InsertUser(instance As User)
    End Sub
  Partial Private Sub UpdateUser(instance As User)
    End Sub
  Partial Private Sub DeleteUser(instance As User)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.Asset_Management_System.My.MySettings.Default.AMSDBConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property Assets() As System.Data.Linq.Table(Of Asset)
		Get
			Return Me.GetTable(Of Asset)
		End Get
	End Property
	
	Public ReadOnly Property AssetTypes() As System.Data.Linq.Table(Of AssetType)
		Get
			Return Me.GetTable(Of AssetType)
		End Get
	End Property
	
	Public ReadOnly Property InventoryLocations() As System.Data.Linq.Table(Of InventoryLocation)
		Get
			Return Me.GetTable(Of InventoryLocation)
		End Get
	End Property
	
	Public ReadOnly Property Manufacturers() As System.Data.Linq.Table(Of Manufacturer)
		Get
			Return Me.GetTable(Of Manufacturer)
		End Get
	End Property
	
	Public ReadOnly Property Warranties() As System.Data.Linq.Table(Of Warranty)
		Get
			Return Me.GetTable(Of Warranty)
		End Get
	End Property
	
	Public ReadOnly Property LoginHistories() As System.Data.Linq.Table(Of LoginHistory)
		Get
			Return Me.GetTable(Of LoginHistory)
		End Get
	End Property
	
	Public ReadOnly Property Users() As System.Data.Linq.Table(Of User)
		Get
			Return Me.GetTable(Of User)
		End Get
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Asset")>  _
Partial Public Class Asset
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As String
	
	Private _Description As String
	
	Private _Manufacturer As String
	
	Private _Asset_type As String
	
	Private _Model As String
	
	Private _Serial_number As String
	
	Private _Condition As String
	
	Private _Status As String
	
	Private _Inventory_location As String
	
	Private _Image As System.Data.Linq.Binary
	
	Private _Date_of_acquisition As System.Nullable(Of Date)
	
	Private _Vendor As String
	
	Private _Value_At_Acquisition As System.Nullable(Of Decimal)
	
	Private _Invoice As String
	
	Private _WarrantyId As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As String)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnDescriptionChanged()
    End Sub
    Partial Private Sub OnManufacturerChanging(value As String)
    End Sub
    Partial Private Sub OnManufacturerChanged()
    End Sub
    Partial Private Sub OnAsset_typeChanging(value As String)
    End Sub
    Partial Private Sub OnAsset_typeChanged()
    End Sub
    Partial Private Sub OnModelChanging(value As String)
    End Sub
    Partial Private Sub OnModelChanged()
    End Sub
    Partial Private Sub OnSerial_numberChanging(value As String)
    End Sub
    Partial Private Sub OnSerial_numberChanged()
    End Sub
    Partial Private Sub OnConditionChanging(value As String)
    End Sub
    Partial Private Sub OnConditionChanged()
    End Sub
    Partial Private Sub OnStatusChanging(value As String)
    End Sub
    Partial Private Sub OnStatusChanged()
    End Sub
    Partial Private Sub OnInventory_locationChanging(value As String)
    End Sub
    Partial Private Sub OnInventory_locationChanged()
    End Sub
    Partial Private Sub OnImageChanging(value As System.Data.Linq.Binary)
    End Sub
    Partial Private Sub OnImageChanged()
    End Sub
    Partial Private Sub OnDate_of_acquisitionChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDate_of_acquisitionChanged()
    End Sub
    Partial Private Sub OnVendorChanging(value As String)
    End Sub
    Partial Private Sub OnVendorChanged()
    End Sub
    Partial Private Sub OnValue_At_AcquisitionChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnValue_At_AcquisitionChanged()
    End Sub
    Partial Private Sub OnInvoiceChanging(value As String)
    End Sub
    Partial Private Sub OnInvoiceChanged()
    End Sub
    Partial Private Sub OnWarrantyIdChanging(value As String)
    End Sub
    Partial Private Sub OnWarrantyIdChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", DbType:="VarChar(10) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property Id() As String
		Get
			Return Me._Id
		End Get
		Set
			If (String.Equals(Me._Id, value) = false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Description", DbType:="VarChar(50)")>  _
	Public Property Description() As String
		Get
			Return Me._Description
		End Get
		Set
			If (String.Equals(Me._Description, value) = false) Then
				Me.OnDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._Description = value
				Me.SendPropertyChanged("Description")
				Me.OnDescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Manufacturer", DbType:="VarChar(50)")>  _
	Public Property Manufacturer() As String
		Get
			Return Me._Manufacturer
		End Get
		Set
			If (String.Equals(Me._Manufacturer, value) = false) Then
				Me.OnManufacturerChanging(value)
				Me.SendPropertyChanging
				Me._Manufacturer = value
				Me.SendPropertyChanged("Manufacturer")
				Me.OnManufacturerChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[Asset type]", Storage:="_Asset_type", DbType:="VarChar(50)")>  _
	Public Property Asset_type() As String
		Get
			Return Me._Asset_type
		End Get
		Set
			If (String.Equals(Me._Asset_type, value) = false) Then
				Me.OnAsset_typeChanging(value)
				Me.SendPropertyChanging
				Me._Asset_type = value
				Me.SendPropertyChanged("Asset_type")
				Me.OnAsset_typeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Model", DbType:="VarChar(50)")>  _
	Public Property Model() As String
		Get
			Return Me._Model
		End Get
		Set
			If (String.Equals(Me._Model, value) = false) Then
				Me.OnModelChanging(value)
				Me.SendPropertyChanging
				Me._Model = value
				Me.SendPropertyChanged("Model")
				Me.OnModelChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[Serial number]", Storage:="_Serial_number", DbType:="VarChar(50)")>  _
	Public Property Serial_number() As String
		Get
			Return Me._Serial_number
		End Get
		Set
			If (String.Equals(Me._Serial_number, value) = false) Then
				Me.OnSerial_numberChanging(value)
				Me.SendPropertyChanging
				Me._Serial_number = value
				Me.SendPropertyChanged("Serial_number")
				Me.OnSerial_numberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Condition", DbType:="VarChar(50)")>  _
	Public Property Condition() As String
		Get
			Return Me._Condition
		End Get
		Set
			If (String.Equals(Me._Condition, value) = false) Then
				Me.OnConditionChanging(value)
				Me.SendPropertyChanging
				Me._Condition = value
				Me.SendPropertyChanged("Condition")
				Me.OnConditionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Status", DbType:="VarChar(50)")>  _
	Public Property Status() As String
		Get
			Return Me._Status
		End Get
		Set
			If (String.Equals(Me._Status, value) = false) Then
				Me.OnStatusChanging(value)
				Me.SendPropertyChanging
				Me._Status = value
				Me.SendPropertyChanged("Status")
				Me.OnStatusChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[Inventory location]", Storage:="_Inventory_location", DbType:="VarChar(50)")>  _
	Public Property Inventory_location() As String
		Get
			Return Me._Inventory_location
		End Get
		Set
			If (String.Equals(Me._Inventory_location, value) = false) Then
				Me.OnInventory_locationChanging(value)
				Me.SendPropertyChanging
				Me._Inventory_location = value
				Me.SendPropertyChanged("Inventory_location")
				Me.OnInventory_locationChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Image", DbType:="Image", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Image() As System.Data.Linq.Binary
		Get
			Return Me._Image
		End Get
		Set
			If (Object.Equals(Me._Image, value) = false) Then
				Me.OnImageChanging(value)
				Me.SendPropertyChanging
				Me._Image = value
				Me.SendPropertyChanged("Image")
				Me.OnImageChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[Date of acquisition]", Storage:="_Date_of_acquisition", DbType:="Date")>  _
	Public Property Date_of_acquisition() As System.Nullable(Of Date)
		Get
			Return Me._Date_of_acquisition
		End Get
		Set
			If (Me._Date_of_acquisition.Equals(value) = false) Then
				Me.OnDate_of_acquisitionChanging(value)
				Me.SendPropertyChanging
				Me._Date_of_acquisition = value
				Me.SendPropertyChanged("Date_of_acquisition")
				Me.OnDate_of_acquisitionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Vendor", DbType:="VarChar(50)")>  _
	Public Property Vendor() As String
		Get
			Return Me._Vendor
		End Get
		Set
			If (String.Equals(Me._Vendor, value) = false) Then
				Me.OnVendorChanging(value)
				Me.SendPropertyChanging
				Me._Vendor = value
				Me.SendPropertyChanged("Vendor")
				Me.OnVendorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[Value At Acquisition]", Storage:="_Value_At_Acquisition", DbType:="Decimal(18,0)")>  _
	Public Property Value_At_Acquisition() As System.Nullable(Of Decimal)
		Get
			Return Me._Value_At_Acquisition
		End Get
		Set
			If (Me._Value_At_Acquisition.Equals(value) = false) Then
				Me.OnValue_At_AcquisitionChanging(value)
				Me.SendPropertyChanging
				Me._Value_At_Acquisition = value
				Me.SendPropertyChanged("Value_At_Acquisition")
				Me.OnValue_At_AcquisitionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Invoice", DbType:="VarChar(50)")>  _
	Public Property Invoice() As String
		Get
			Return Me._Invoice
		End Get
		Set
			If (String.Equals(Me._Invoice, value) = false) Then
				Me.OnInvoiceChanging(value)
				Me.SendPropertyChanging
				Me._Invoice = value
				Me.SendPropertyChanged("Invoice")
				Me.OnInvoiceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_WarrantyId", DbType:="VarChar(10)")>  _
	Public Property WarrantyId() As String
		Get
			Return Me._WarrantyId
		End Get
		Set
			If (String.Equals(Me._WarrantyId, value) = false) Then
				Me.OnWarrantyIdChanging(value)
				Me.SendPropertyChanging
				Me._WarrantyId = value
				Me.SendPropertyChanged("WarrantyId")
				Me.OnWarrantyIdChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.AssetType")>  _
Partial Public Class AssetType
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As String
	
	Private _Description As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As String)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnDescriptionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", DbType:="VarChar(10) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property Id() As String
		Get
			Return Me._Id
		End Get
		Set
			If (String.Equals(Me._Id, value) = false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Description", DbType:="VarChar(50)")>  _
	Public Property Description() As String
		Get
			Return Me._Description
		End Get
		Set
			If (String.Equals(Me._Description, value) = false) Then
				Me.OnDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._Description = value
				Me.SendPropertyChanged("Description")
				Me.OnDescriptionChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.InventoryLocation")>  _
Partial Public Class InventoryLocation
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As String
	
	Private _Name_ As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As String)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnName_Changing(value As String)
    End Sub
    Partial Private Sub OnName_Changed()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", DbType:="VarChar(10) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property Id() As String
		Get
			Return Me._Id
		End Get
		Set
			If (String.Equals(Me._Id, value) = false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[Name ]", Storage:="_Name_", DbType:="VarChar(50)")>  _
	Public Property Name_() As String
		Get
			Return Me._Name_
		End Get
		Set
			If (String.Equals(Me._Name_, value) = false) Then
				Me.OnName_Changing(value)
				Me.SendPropertyChanging
				Me._Name_ = value
				Me.SendPropertyChanged("Name_")
				Me.OnName_Changed
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Manufacturer")>  _
Partial Public Class Manufacturer
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As String
	
	Private _Name As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As String)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", DbType:="VarChar(10) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property Id() As String
		Get
			Return Me._Id
		End Get
		Set
			If (String.Equals(Me._Id, value) = false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="VarChar(50)")>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me.OnNameChanging(value)
				Me.SendPropertyChanging
				Me._Name = value
				Me.SendPropertyChanged("Name")
				Me.OnNameChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Warranty")>  _
Partial Public Class Warranty
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Warranty_Id As String
	
	Private _Warranty_Name As String
	
	Private _Warranty_Type As String
	
	Private _Warranty_Start As System.Nullable(Of Date)
	
	Private _Warranty_End As System.Nullable(Of Date)
	
	Private _Warranty_Status As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnWarranty_IdChanging(value As String)
    End Sub
    Partial Private Sub OnWarranty_IdChanged()
    End Sub
    Partial Private Sub OnWarranty_NameChanging(value As String)
    End Sub
    Partial Private Sub OnWarranty_NameChanged()
    End Sub
    Partial Private Sub OnWarranty_TypeChanging(value As String)
    End Sub
    Partial Private Sub OnWarranty_TypeChanged()
    End Sub
    Partial Private Sub OnWarranty_StartChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnWarranty_StartChanged()
    End Sub
    Partial Private Sub OnWarranty_EndChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnWarranty_EndChanged()
    End Sub
    Partial Private Sub OnWarranty_StatusChanging(value As String)
    End Sub
    Partial Private Sub OnWarranty_StatusChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[Warranty Id]", Storage:="_Warranty_Id", DbType:="VarChar(10) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property Warranty_Id() As String
		Get
			Return Me._Warranty_Id
		End Get
		Set
			If (String.Equals(Me._Warranty_Id, value) = false) Then
				Me.OnWarranty_IdChanging(value)
				Me.SendPropertyChanging
				Me._Warranty_Id = value
				Me.SendPropertyChanged("Warranty_Id")
				Me.OnWarranty_IdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[Warranty Name]", Storage:="_Warranty_Name", DbType:="VarChar(50)")>  _
	Public Property Warranty_Name() As String
		Get
			Return Me._Warranty_Name
		End Get
		Set
			If (String.Equals(Me._Warranty_Name, value) = false) Then
				Me.OnWarranty_NameChanging(value)
				Me.SendPropertyChanging
				Me._Warranty_Name = value
				Me.SendPropertyChanged("Warranty_Name")
				Me.OnWarranty_NameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[Warranty Type]", Storage:="_Warranty_Type", DbType:="VarChar(50)")>  _
	Public Property Warranty_Type() As String
		Get
			Return Me._Warranty_Type
		End Get
		Set
			If (String.Equals(Me._Warranty_Type, value) = false) Then
				Me.OnWarranty_TypeChanging(value)
				Me.SendPropertyChanging
				Me._Warranty_Type = value
				Me.SendPropertyChanged("Warranty_Type")
				Me.OnWarranty_TypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[Warranty Start]", Storage:="_Warranty_Start", DbType:="Date")>  _
	Public Property Warranty_Start() As System.Nullable(Of Date)
		Get
			Return Me._Warranty_Start
		End Get
		Set
			If (Me._Warranty_Start.Equals(value) = false) Then
				Me.OnWarranty_StartChanging(value)
				Me.SendPropertyChanging
				Me._Warranty_Start = value
				Me.SendPropertyChanged("Warranty_Start")
				Me.OnWarranty_StartChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[Warranty End]", Storage:="_Warranty_End", DbType:="Date")>  _
	Public Property Warranty_End() As System.Nullable(Of Date)
		Get
			Return Me._Warranty_End
		End Get
		Set
			If (Me._Warranty_End.Equals(value) = false) Then
				Me.OnWarranty_EndChanging(value)
				Me.SendPropertyChanging
				Me._Warranty_End = value
				Me.SendPropertyChanged("Warranty_End")
				Me.OnWarranty_EndChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[Warranty Status]", Storage:="_Warranty_Status", DbType:="VarChar(10)")>  _
	Public Property Warranty_Status() As String
		Get
			Return Me._Warranty_Status
		End Get
		Set
			If (String.Equals(Me._Warranty_Status, value) = false) Then
				Me.OnWarranty_StatusChanging(value)
				Me.SendPropertyChanging
				Me._Warranty_Status = value
				Me.SendPropertyChanged("Warranty_Status")
				Me.OnWarranty_StatusChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.LoginHistory")>  _
Partial Public Class LoginHistory
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As String
	
	Private _UserId As String
	
	Private _Name As String
	
	Private _Role As String
	
	Private _DateTime As System.Nullable(Of Date)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As String)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnUserIdChanging(value As String)
    End Sub
    Partial Private Sub OnUserIdChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnRoleChanging(value As String)
    End Sub
    Partial Private Sub OnRoleChanged()
    End Sub
    Partial Private Sub OnDateTimeChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateTimeChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", DbType:="VarChar(10) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property Id() As String
		Get
			Return Me._Id
		End Get
		Set
			If (String.Equals(Me._Id, value) = false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserId", DbType:="VarChar(10)")>  _
	Public Property UserId() As String
		Get
			Return Me._UserId
		End Get
		Set
			If (String.Equals(Me._UserId, value) = false) Then
				Me.OnUserIdChanging(value)
				Me.SendPropertyChanging
				Me._UserId = value
				Me.SendPropertyChanged("UserId")
				Me.OnUserIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="VarChar(50)")>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me.OnNameChanging(value)
				Me.SendPropertyChanging
				Me._Name = value
				Me.SendPropertyChanged("Name")
				Me.OnNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Role", DbType:="VarChar(50)")>  _
	Public Property Role() As String
		Get
			Return Me._Role
		End Get
		Set
			If (String.Equals(Me._Role, value) = false) Then
				Me.OnRoleChanging(value)
				Me.SendPropertyChanging
				Me._Role = value
				Me.SendPropertyChanged("Role")
				Me.OnRoleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateTime", DbType:="DateTime")>  _
	Public Property DateTime() As System.Nullable(Of Date)
		Get
			Return Me._DateTime
		End Get
		Set
			If (Me._DateTime.Equals(value) = false) Then
				Me.OnDateTimeChanging(value)
				Me.SendPropertyChanging
				Me._DateTime = value
				Me.SendPropertyChanged("DateTime")
				Me.OnDateTimeChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.[User]")>  _
Partial Public Class User
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As String
	
	Private _Name As String
	
	Private _Username As String
	
	Private _Password As String
	
	Private _Gender As String
	
	Private _Contact_number As String
	
	Private _Email_address As String
	
	Private _Image As System.Data.Linq.Binary
	
	Private _Role As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As String)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnUsernameChanging(value As String)
    End Sub
    Partial Private Sub OnUsernameChanged()
    End Sub
    Partial Private Sub OnPasswordChanging(value As String)
    End Sub
    Partial Private Sub OnPasswordChanged()
    End Sub
    Partial Private Sub OnGenderChanging(value As String)
    End Sub
    Partial Private Sub OnGenderChanged()
    End Sub
    Partial Private Sub OnContact_numberChanging(value As String)
    End Sub
    Partial Private Sub OnContact_numberChanged()
    End Sub
    Partial Private Sub OnEmail_addressChanging(value As String)
    End Sub
    Partial Private Sub OnEmail_addressChanged()
    End Sub
    Partial Private Sub OnImageChanging(value As System.Data.Linq.Binary)
    End Sub
    Partial Private Sub OnImageChanged()
    End Sub
    Partial Private Sub OnRoleChanging(value As String)
    End Sub
    Partial Private Sub OnRoleChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", DbType:="VarChar(10) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property Id() As String
		Get
			Return Me._Id
		End Get
		Set
			If (String.Equals(Me._Id, value) = false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="VarChar(50)")>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me.OnNameChanging(value)
				Me.SendPropertyChanging
				Me._Name = value
				Me.SendPropertyChanged("Name")
				Me.OnNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Username", DbType:="VarChar(50)")>  _
	Public Property Username() As String
		Get
			Return Me._Username
		End Get
		Set
			If (String.Equals(Me._Username, value) = false) Then
				Me.OnUsernameChanging(value)
				Me.SendPropertyChanging
				Me._Username = value
				Me.SendPropertyChanged("Username")
				Me.OnUsernameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Password", DbType:="VarChar(50)")>  _
	Public Property Password() As String
		Get
			Return Me._Password
		End Get
		Set
			If (String.Equals(Me._Password, value) = false) Then
				Me.OnPasswordChanging(value)
				Me.SendPropertyChanging
				Me._Password = value
				Me.SendPropertyChanged("Password")
				Me.OnPasswordChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Gender", DbType:="VarChar(10)")>  _
	Public Property Gender() As String
		Get
			Return Me._Gender
		End Get
		Set
			If (String.Equals(Me._Gender, value) = false) Then
				Me.OnGenderChanging(value)
				Me.SendPropertyChanging
				Me._Gender = value
				Me.SendPropertyChanged("Gender")
				Me.OnGenderChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[Contact number]", Storage:="_Contact_number", DbType:="VarChar(15)")>  _
	Public Property Contact_number() As String
		Get
			Return Me._Contact_number
		End Get
		Set
			If (String.Equals(Me._Contact_number, value) = false) Then
				Me.OnContact_numberChanging(value)
				Me.SendPropertyChanging
				Me._Contact_number = value
				Me.SendPropertyChanged("Contact_number")
				Me.OnContact_numberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[Email address]", Storage:="_Email_address", DbType:="VarChar(50)")>  _
	Public Property Email_address() As String
		Get
			Return Me._Email_address
		End Get
		Set
			If (String.Equals(Me._Email_address, value) = false) Then
				Me.OnEmail_addressChanging(value)
				Me.SendPropertyChanging
				Me._Email_address = value
				Me.SendPropertyChanged("Email_address")
				Me.OnEmail_addressChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Image", DbType:="Image", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Image() As System.Data.Linq.Binary
		Get
			Return Me._Image
		End Get
		Set
			If (Object.Equals(Me._Image, value) = false) Then
				Me.OnImageChanging(value)
				Me.SendPropertyChanging
				Me._Image = value
				Me.SendPropertyChanged("Image")
				Me.OnImageChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Role", DbType:="VarChar(10)")>  _
	Public Property Role() As String
		Get
			Return Me._Role
		End Get
		Set
			If (String.Equals(Me._Role, value) = false) Then
				Me.OnRoleChanging(value)
				Me.SendPropertyChanging
				Me._Role = value
				Me.SendPropertyChanged("Role")
				Me.OnRoleChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class
